20000000 times, no preprocessor variables
1 task
1.92u 0.00s 0:01.92
1.90u 0.01s 0:01.91
1.92u 0.00s 0:01.92
1.93u 0.01s 0:01.94

2 tasks
3.89u 0.00s 0:01.97
3.82u 0.00s 0:01.91
3.88u 0.00s 0:01.95
3.84u 0.01s 0:01.93

4 tasks
7.69u 0.02s 0:01.96
7.77u 0.00s 0:01.97
7.70u 0.00s 0:01.93
7.77u 0.00s 0:01.99

The real time changes very little as the number of tasks increases. The user
time grows proportionally to the number of tasks, because all operations are
performed on the stack.


10000000 times, DARRAY
1 task
2.07u 0.00s 0:02.06
2.03u 0.00s 0:02.03
2.07u 0.00s 0:02.06
2.06u 0.00s 0:02.06

2 tasks
30.84u 0.04s 0:15.46
33.88u 0.08s 0:17.06
34.09u 0.07s 0:17.08
35.88u 0.03s 0:17.95

4 tasks
181.95u 0.31s 0:45.72
165.58u 0.35s 0:43.00
172.46u 0.50s 0:44.26
163.54u 0.38s 0:41.93

Both the user time and the real time grows in this case. This is because
the operations are all performed on the heap instead of the stack. Both times
also grows much faster depending on the number of tasks.


10000000 times, VECTOR1
1 task
3.58u 0.00s 0:03.57
3.59u 0.01s 0:03.60
3.58u 0.00s 0:03.59
3.64u 0.00s 0:03.63

2 tasks
31.77u 0.03s 0:15.90
31.01u 0.04s 0:15.54
38.31u 0.03s 0:19.21
32.62u 0.04s 0:16.44

4 tasks
149.04u 0.27s 0:37.45
167.92u 0.37s 0:42.24
166.64u 0.46s 0:43.09
163.22u 0.21s 0:42.67

Both times grows in this case.  This is because it needs to request and
allocate memory in the heap as well as manage the memory internally in the
vector.


2000000, VECTOR2
1 task
2.73u 0.00s 0:02.73
2.73u 0.00s 0:02.73
2.73u 0.00s 0:02.73
2.72u 0.00s 0:02.72

2 tasks
38.37u 0.06s 0:19.20
35.00u 0.09s 0:17.53
33.63u 0.03s 0:16.85
36.53u 0.04s 0:18.33

4 tasks
137.82u 0.20s 0:34.59
135.61u 0.26s 0:34.18
135.01u 0.20s 0:33.85
137.62u 0.30s 0:34.63

The user time and the real time grows again in this case.
It requires to ask the allocator for more memory on the heap depending on
the number of tasks.


---

The default version performs much faster because all of the memory lives on the
stack. The DARRAY and VECTOR1 both require memory on the heap, and need to
request for memory which slows down the process. However, they only need to
request the amount of data once, whereas VECTOR2 needs to request memory from
the heap multiple times as the vector dynamically grows since the amount of memory needed
isn't explicitly declared.
